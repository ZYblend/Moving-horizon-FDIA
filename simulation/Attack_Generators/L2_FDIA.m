function e_full = L2_FDIA(H,I_attack,eps)
%% e = L2_FDIA(H,I_attack,tau,T)
%  Generates sparse attack vector that corrupts the L2 states estimates as
%  much as possible for the linear systeme given by: y = H*x 
%
% cite: Liu, Yao, Peng Ning, and Michael K. Reiter. 
%       "False data injection attacks against state estimation in electric power grids." 
%         ACM Transactions on Information and System Security (TISSEC) 14.1 (2011): 1-33.
%
% A successful FDIA can be generated by solving the following optimization program:
%                                       Maximize ||Q_I*e||_2
%                                       Subject to ||F_I*e||_2 <= eps
% where Q_I = Q(:,I_attack), Q = pinv(H), F_I = F(:,I_attack), F = H*pinv(H)-I
%
% Closed-form solution:
% (1) If F is rank-deficient, then
%                              e = (I-pinv(F_I)*F_I)d, where d(k-by-1) is an arbitrary vector, 
%                                                        the effect of attack is unbounded
% (2) If F is full-rank, then
%                         e = (sqrt(F_I.'*F_I))^{-1}*eps*v_max
% where v_max is the eigenvector corresponding to the biggest eigenvalue (lambda_max) of
% G = (sqrt((F_I.'*F_I).'))^{-1}*(Q_I.'*Q_I)*(sqrt(F_I.'*F_I))^{-1}
%
%  Inputs:
%        - H [m-by-n]: System Linear Measurment model
%        - I_attack [k -column vector] : vector of attack locations
%        - eps [scalar >0, <1] : Bad Data Detection(BDD) escape parameter.
% Output:
%        - e [m - column vector] : attack vector on the support I_attack
%
% Yu Zheng, 09/19/2021, FSU

%% parameteres
Q = pinv(H,0.01);
F = eye(size(H,1))-H*pinv(H,0.01);

Q_I = Q(:,I_attack);
F_I = F(:,I_attack);

F_I_inv = pinv(F_I,0.01);

F_sqr = F_I.'*F_I;
Q_sqr = Q_I.'*Q_I;

k = length(I_attack);

%% optmization
if rank(F_I) < k
    d = 0.01*rand(k,1);  % arbitrary nonzero vector
    e = (eye(k)- F_I_inv*F_I)*d;
else
    G = inv(chol(F_sqr.'))*Q_sqr*inv(chol(F_sqr));
    
    [V,D] = eig(G); % The columns of V present eigenvectors of F. The diagonal matrix D contains eigenvalues. FV=VD
    lambda = diag(D);
    [~,I_max] = max(lambda);
    v_max = real(V(:,I_max));
    
    e = inv(chol(F_sqr))*eps*v_max;
end

e_full = zeros(size(H,1),1);
e_full(I_attack) = e;
% e=real(e);
    
